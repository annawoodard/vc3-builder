#! /usr/bin/env perl

# generate base singularity and docker images for vc3 builder

use strict;
use warnings;
use Carp;
use Getopt::Long;
use File::Copy;
use File::Path qw/make_path/;
use File::Spec::Functions qw/catfile/;

use v5.10;

my @dev_dependencies = qw{
cmake
bzip2
curl
cc
cplusplus
find
fortran
git
gmake
m4
gtar
openssl
perl
python
strace
vim
wget
which
};

my @dependencies = (@dev_dependencies);

# distribution -> list of versions
my %versions_of; 

# list of name of package in distribution
my %extras_for;

# distribution -> command to install name of package in distribution
my %command_for;

# list of shell commands to execute post installation.
my %postinstall_for;

$versions_of{centos} = [ qw{ 7 6 } ];
$command_for{centos} = 'yum install -y';

$versions_of{ubuntu} = [ qw{ 16.04  } ];
$command_for{ubuntu} = 'apt-get update && apt-get install -y';

$versions_of{debian} = [ qw{ 9.2 } ];
$command_for{debian} = $command_for{ubuntu};

$versions_of{opensuse} = [ qw{ 42.3 } ];
$command_for{opensuse} = 'zypper --non-interactive update && zypper --non-interactive patch && zypper --non-interactive install';


# e.g., $package_for{distro}{version}{dependency} == 'package'
my %package_for;

########## CENTOS ########## 
$package_for{centos}{default} = {
bzip2                    => 'bzip2',
cmake                    => 'cmake',
cc                       => 'gcc',
cplusplus                => 'gcc-c++',
curl                     => 'curl',
find                     => 'findutils',
fortran                  => 'gfortran',
gdb                      => 'gdb',
git                      => 'git',
gmake                    => 'make',
gtar                     => 'tar',
m4                       => 'm4',
openssl                  => 'openssl',
perl                     => 'perl-devel',
python                   => 'python-devel',
strace                   => 'strace',
vim                      => 'vim',
wget                     => 'wget',
which                    => 'which',
};

$extras_for{centos}{default} = ['perl-core', 'libc-devel'];

########## UBUNTU ########## 
$package_for{ubuntu}{default} = {
cmake                    => 'cmake',
bzip2                    => 'bzip2',
cc                       => 'gcc',
curl                     => 'curl',
cplusplus                => 'g++',
find                     => 'findutils',
fortran                  => 'gfortran',
git                      => 'git',
gmake                    => 'make',
gtar                     => 'tar',
m4                       => 'm4',
openssl                  => 'openssl',
perl                     => 'libperl-dev',
python                   => 'python-dev',
strace                   => 'strace',
vim                      => 'vim',
wget                     => 'wget',
which                    => 'debianutils',
};

$extras_for{ubuntu}{default} = ['tzdata', 'locales'];

$postinstall_for{ubuntu}{default} = [
	'echo en_US.UTF-8 UTF-8 >> /etc/locale.gen',
	'/usr/sbin/locale-gen'
];

########## DEBIAN ##########
$package_for{debian}{default}     = { %{$package_for{ubuntu}{default}} };

$extras_for{debian}{default}      = [ @{$extras_for{ubuntu}{default}} ];

$postinstall_for{debian}{default} = [ @{$postinstall_for{ubuntu}{default}} ];

########## OPENSUSE ########## 
$package_for{opensuse}{default} = {
bzip2                    => 'bzip2',
cmake                    => 'cmake',
cc                       => 'gcc',
cplusplus                => 'gcc-c++',
curl                     => 'curl',
find                     => 'findutils',
fortran                  => 'gcc-fortran',
git                      => 'git',
gmake                    => 'make',
gtar                     => 'tar',
m4                       => 'm4',
openssl                  => 'openssl',
perl                     => 'perl',
python                   => 'python-devel',
strace                   => 'strace',
vim                      => 'vim',
wget                     => 'wget',
which                    => 'which',
};

$extras_for{opensuse}{default} = ['timezone'];

unless (caller) {
    main();
}

sub main {

	# architecture of current machine.
    chomp(my $arch = qx(uname -m));

	my $arch_opt = $arch;
	my $help;
	my $list;
	my $build;
	my $recp;
	my $all;
	my @types;
	my $output_dir = 'images';

	GetOptions(
		"help", => \$help,
		"list", => \$list,
		"recp", => \$recp,
		"build" => \$build,
		"arch=s", => \$arch_opt,
		"all",    => \$all,
		"output_dir=s", => \$output_dir,
		"docker"      => sub { push @types, 'docker'; },
		"singularity" => sub { push @types, 'singularity'; } 
	) or die "@{[ show_help() ]}\n";

	if($help) {
		show_help();
		exit 0;
	}

	unless($arch eq $arch_opt) {
		die "Required architecture '$ARGV[0]' is not the architecture of the current machine $arch.\n";
	}

	if($list) {
		for my $p (list_known_platforms()) {
			say $p;
		}
		exit 0;
	}

	if(@{ARGV} > 0 and $all) {
		die "individual builds cannot be specified with --all=<dir>.\n"; 
	}

	unless(@types) {
		@types = ('singularity', 'docker');
	}

	make_path($output_dir, { mode => 0755 });
	unless( -d $output_dir && -w $output_dir ) {
		die "Problem creating '$output_dir': $@";
	}

	for my $type (@types) {
		if($all) {
			generate_all_images($type, $arch, $output_dir, $recp);
		} else {
			my ($dist, $version, $output_name) = @{ARGV};
			generate_image($type, $arch, $dist, $version, $output_dir, $output_name, $recp);
		}
	}
}

sub generate_all_images {
	my ($type, $arch, $output_dir, $recp) = @_;

	for my $dist (keys %versions_of) {
		for my $version (@{$versions_of{$dist}}) {
			generate_image($type, $arch, $dist, $version, $output_dir, output_name($type, $arch, $dist, $version), $recp);
		}
	}
}

sub generate_image {
	my ($type, $arch, $dist, $version, $output_dir, $output_name, $recp) = @_;

	unless($dist and $version) {
		show_help();
		exit 1;
	}

	unless($versions_of{$dist}) {
		die "I don't know about the distribution $dist\n";
	}

	unless($version ~~ @{$versions_of{$dist}}) {
		warn "I don't know about version $version for the distribution $dist.\nUsing defaults that are not tested!\n";
	}

	unless($output_name) {
		$output_name = output_name($type, $arch, $dist, $version);
		warn "No output prefix given, using $output_name\n";
	}

	if($type eq 'singularity') {
		return generate_singularity_image($arch, $dist, $version, $output_dir, $output_name, $recp);
	} elsif($type eq 'docker') {
		return generate_docker_image($arch, $dist, $version, $output_dir, $output_name, $recp);
	} else {
		die "I don't know how to build images of type '$type'.\n";
	}
}

sub generate_singularity_image {
	my ($arch, $dist, $version, $output_dir, $output_name, $recp) = @_;

	make_path(catfile($output_dir, 'singularity'), { mode => 0755 });

	my $sin_name = catfile($output_dir, 'singularity', "$output_name.sin");
	my $img_name = catfile($output_dir, 'singularity', "$output_name.img");

	say "Creating Singularity file: $sin_name";
	open my $sin_fh, '>', $sin_name || croak "Problem with '$sin_name': $@";
	print { $sin_fh } singularity_file_for($dist, $version, $img_name, $sin_name);
	close $sin_fh;

	unless($recp) {
		my $exit_status;

		say "Building image $img_name from: $sin_name";

		-e "$img_name"     && system(qq(sudo rm -rf "$img_name"));
		-d "$img_name.sbx" && system(qq(sudo rm -rf "$img_name.sbx"));

		$exit_status = system(qq(sudo singularity build --sandbox "$img_name.sbx" "$sin_name"));
		unless($exit_status == 0) {
			die "Could not build image with $sin_name\n";
		}

		$exit_status = system(qq(sudo singularity build "$img_name" "$img_name.sbx"));
		unless($exit_status == 0) {
			die "Could not build from $img_name.sbx\n";
		}

		system(qq(sudo rm -rf $img_name.sbx));
	}
}

sub singularity_file_for {
    my ($dist, $version, $img_name, $sin_name) = @_;
    my @packages;
	
	@packages = map { $package_for{$dist}{$version}{$_} || $package_for{$dist}{default}{$_} || die "Undefined dependency $_" } @dependencies;

	if($extras_for{$dist} and $extras_for{$dist}{$version}) {
		@packages = (@packages, @{$extras_for{$dist}{$version}});
	}

	if($extras_for{$dist} and $extras_for{$dist}{default}) {
		@packages = (@packages, @{$extras_for{$dist}{default}});
	}

	my $sinfile = <<EOF;
# Singularity image VC3 for $dist$version
# Build as: singularity build $img_name $sin_name
# Run as:   singularity shell $img_name
#

Bootstrap: docker
From: $dist:$version

%post
	$command_for{$dist} @packages

EOF

	if($postinstall_for{$dist}) {
		my $posts = $postinstall_for{$dist}{$version} || $postinstall_for{$dist}{default};
		if($posts) { 
			$sinfile = join("\n\t", $sinfile, @{$posts});
		}

		$sinfile .= "\n";
	}

	return $sinfile;
}


sub generate_docker_image {
	my ($arch, $dist, $version, $output_dir, $output_name, $recp) = @_;

	make_path(catfile($output_dir, 'docker'), { mode => 0755 });

	my $doc_name = catfile($output_dir, 'docker', "$output_name.dockerfile");
	my $img_name = catfile($output_dir, 'docker', "$output_name.img");
	my $tag      = "vc3project/builder-$dist$version";

	say "Creating Docker file: $doc_name";
	open my $doc_fh, '>', $doc_name || croak "Problem with '$doc_name': $@";
	print { $doc_fh } dockerfile_for($dist, $version, $img_name, $doc_name);
	close $doc_fh;

	unless($recp) {
		my $exit_status;

		say "Building image from $doc_name to $tag";

		my $context = catfile($output_dir, 'docker', 'context');
		-d $context && system(qq(sudo rm -rf $context));

		make_path($context, { mode => 0755 });
		copy $doc_name, "$context/Dockerfile";

		-e "$img_name"     && system(qq(sudo rm -rf "$img_name"));
		system(qq(sudo docker rmi "$tag"));

		$exit_status = system(qq(sudo docker build  --tag="$tag" --no-cache=true --force-rm $context));
		unless($exit_status == 0) {
			die "Could not build image with $doc_name\n";
		}

		say "Saving image from $tag to $img_name";
		$exit_status = system(qq(sudo docker save --output "$img_name" "$tag"));
		unless($exit_status == 0) {
			die "Could not save to $img_name\n";
		}

		chmod $img_name, 0755;
	}
}

sub dockerfile_for {
    my ($dist, $version, $img_name, $doc_name) = @_;
    my @packages;
	
	@packages = map { $package_for{$dist}{$version}{$_} || $package_for{$dist}{default}{$_} || die "Undefined dependency $_" } @dependencies;

	if($extras_for{$dist} and $extras_for{$dist}{$version}) {
		@packages = (@packages, @{$extras_for{$dist}{$version}});
	}

	if($extras_for{$dist} and $extras_for{$dist}{default}) {
		@packages = (@packages, @{$extras_for{$dist}{default}});
	}

	my @runs;
	push @runs, "$command_for{$dist} @packages";

	if($postinstall_for{$dist}) {
		my $posts = $postinstall_for{$dist}{$version} || $postinstall_for{$dist}{default};
		if($posts) { 
			push @runs, @{$posts};
		}
	}

	my $docfile = <<EOF;
# Docker image VC3 for $dist$version
# Build as: docker build --tag="vc3/$dist$version" --no-cache=true --force-rm .
#           docker save --output $img_name "vc3/$dist$version" 
# Run as:   docker run   -i -t --rm --tag="vc3/$dist$version" /bin/sh
#

FROM $dist:$version
WORKDIR /
RUN @{[join(' && ', @runs)]}

EOF

	return $docfile;
}


sub show_help {
	say "Use:";
	say "$0 [options] [distribution version outputprefix]";
	say "\n Example:\n$0 --arch x86_64 centos 7 Singularity.vc3.x86_64-centos7";
	say "\nproduces Singularity.vc3.x86_64-centos7.{sin,img}";
	say "\noptions:";
	say "\t--help            Show this message.";
	say "\t--all             Build all known platforms.";
	say "\t--outputdir=<dir> Build platforms into dir (default ./images).";
	say "\t--build           Build from previously generated reciped only.";
	say "\t--arch=<arch>     Othen than x86_64 (the default), nothing has been tested.";
	say "\t--list            List known platforms.";
	say "\t--recp            Generate recipes only, not images.";
	say "\t--docker          Generate docker images.";
	say "\t--singularity     Generate singularity images.";

	return '';
}

sub output_name {
	my ($type, $arch, $dist, $version) = @_;

	return ucfirst($type) . ".vc3.$arch-$dist$version";
}


sub list_known_platforms {
	my @platforms = ();

	for my $dist (keys %versions_of) {
		for my $v (@{$versions_of{$dist}}) {
			push @platforms, "${dist} ${v}";
		}
	}

	@platforms = sort { $a cmp $b } @platforms;

	return @platforms;
}

# vim: set noexpandtab tabstop=4:
